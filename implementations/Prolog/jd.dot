digraph joy_defs {
    "--" -> "-";
    "?" -> "bool";
    "?" -> "dup";
    "&&" -> "branch";
    "&&" -> "dip";
    "&&" -> "nullary";
    "&&" -> "nulco";
    "++" -> "+";
    "||" -> "branch";
    "||" -> "dip";
    "||" -> "nullary";
    "||" -> "nulco";
    "!-" -> ">=";
    "<{}" -> "swap";
    "<<{}" -> "rolldown";
    "abs" -> "branch";
    "abs" -> "neg";
    "abs" -> "<";
    "abs" -> "dup";
    "anamorphism" -> "genrec";
    "anamorphism" -> "swons";
    "anamorphism" -> "dip";
    "anamorphism" -> "swap";
    "anamorphism" -> "pop";
    "app1" -> "infrst";
    "app1" -> "grba";
    "app2" -> "ii";
    "app2" -> "cons";
    "app2" -> "infrst";
    "app2" -> "dip";
    "app2" -> "swap";
    "app2" -> "grba";
    "app3" -> "appN";
    "appN" -> "disenstacken";
    "appN" -> "map";
    "appN" -> "codi";
    "appN" -> "grabN";
    "at" -> "first";
    "at" -> "drop";
    "average" -> "/";
    "average" -> "cleave";
    "average" -> "size";
    "average" -> "sum";
    "b" -> "dip";
    "b" -> "i";
    "binary" -> "popd";
    "binary" -> "unary";
    "ccccons" -> "ccons";
    "ccons" -> "cons";
    "clear" -> "loop";
    "clear" -> "pop";
    "clear" -> "bool";
    "clear" -> "stack";
    "cleave" -> "popdd";
    "cleave" -> "fork";
    "clop" -> "popdd";
    "clop" -> "cleave";
    "codi" -> "dip";
    "codi" -> "cons";
    "codireco" -> "reco";
    "codireco" -> "codi";
    "dinfrirst" -> "infrst";
    "dinfrirst" -> "dip";
    "dipd" -> "codi";
    "dipd" -> "dip";
    "disenstacken" -> "pop";
    "disenstacken" -> "loop";
    "disenstacken" -> "uncons";
    "disenstacken" -> "?";
    "down_to_zero" -> "while";
    "down_to_zero" -> "--";
    "down_to_zero" -> "dup";
    "down_to_zero" -> ">";
    "drop" -> "times";
    "drop" -> "rest";
    "dupd" -> "dip";
    "dupd" -> "dup";
    "dupdd" -> "dipd";
    "dupdd" -> "dup";
    "dupdip" -> "dip";
    "dupdip" -> "dupd";
    "dupdipd" -> "dipd";
    "dupdipd" -> "dup";
    "enstacken" -> "dip";
    "enstacken" -> "clear";
    "enstacken" -> "stack";
    "flatten" -> "step";
    "flatten" -> "concat";
    "flatten" -> "<{}";
    "fork" -> "app2";
    "fork" -> "i";
    "fourth" -> "third";
    "fourth" -> "rest";
    "gcd" -> "pop";
    "gcd" -> "loop";
    "gcd" -> ">";
    "gcd" -> "dup";
    "gcd" -> "mod";
    "gcd" -> "tuck";
    "genrec" -> "ifte";
    "genrec" -> "concat";
    "genrec" -> "swons";
    "genrec" -> "nullary";
    "genrec" -> "ccccons";
    "genrec" -> "genrec";
    "grabN" -> "times";
    "grabN" -> "cons";
    "grabN" -> "<{}";
    "grba" -> "dip";
    "grba" -> "popd";
    "grba" -> "stack";
    "hypot" -> "sqrt";
    "hypot" -> "+";
    "hypot" -> "ii";
    "hypot" -> "sqr";
    "ifte" -> "branch";
    "ifte" -> "swap";
    "ifte" -> "dipd";
    "ifte" -> "nullary";
    "ii" -> "i";
    "ii" -> "dupdip";
    "ii" -> "dip";
    "infra" -> "dip";
    "infra" -> "i";
    "infra" -> "swaack";
    "infra" -> "swons";
    "infrst" -> "first";
    "infrst" -> "infra";
    "make_generator" -> "ccons";
    "make_generator" -> "codireco";
    "mod" -> "%";
    "neg" -> "-";
    "neg" -> "swap";
    "not" -> "branch";
    "nulco" -> "cons";
    "nulco" -> "nullary";
    "nullary" -> "dinfrirst";
    "nullary" -> "stack";
    "of" -> "at";
    "of" -> "swap";
    "pam" -> "map";
    "pam" -> "i";
    "pm" -> "clop";
    "pm" -> "-";
    "pm" -> "+";
    "popd" -> "dip";
    "popd" -> "pop";
    "popdd" -> "dipd";
    "popdd" -> "pop";
    "popop" -> "pop";
    "popopop" -> "popop";
    "popopop" -> "pop";
    "popopd" -> "dip";
    "popopd" -> "popop";
    "popopdd" -> "dipd";
    "popopdd" -> "popop";
    "product" -> "step";
    "product" -> "*";
    "product" -> "swap";
    "quoted" -> "dip";
    "quoted" -> "unit";
    "range" -> "anamorphism";
    "range" -> "dup";
    "range" -> "-";
    "range" -> "<=";
    "range_to_zero" -> "infra";
    "range_to_zero" -> "down_to_zero";
    "range_to_zero" -> "unit";
    "reco" -> "cons";
    "reco" -> "rest";
    "rest" -> "infra";
    "rest" -> "pop";
    "reverse" -> "shunt";
    "reverse" -> "<{}";
    "roll>" -> "swapd";
    "roll>" -> "swap";
    "roll<" -> "swap";
    "roll<" -> "swapd";
    "rollup" -> "roll>";
    "rolldown" -> "roll<";
    "rrest" -> "rest";
    "run" -> "infra";
    "run" -> "<{}";
    "second" -> "first";
    "second" -> "rest";
    "shift" -> "dip";
    "shift" -> "swons";
    "shift" -> "uncons";
    "shunt" -> "step";
    "shunt" -> "swons";
    "size" -> "step_zero";
    "size" -> "++";
    "size" -> "pop";
    "spiral_next" -> "dip";
    "spiral_next" -> "ifte";
    "spiral_next" -> "--";
    "spiral_next" -> "++";
    "spiral_next" -> "&&";
    "spiral_next" -> "||";
    "spiral_next" -> "!-";
    "spiral_next" -> "pop";
    "spiral_next" -> "<>";
    "spiral_next" -> "<=";
    "spiral_next" -> "ii";
    "spiral_next" -> "abs";
    "split_at" -> "clop";
    "split_at" -> "take";
    "split_at" -> "drop";
    "split_list" -> "clop";
    "split_list" -> "drop";
    "split_list" -> "reverse";
    "split_list" -> "take";
    "sqr" -> "*";
    "sqr" -> "dup";
    "stackd" -> "dip";
    "stackd" -> "stack";
    "step_zero" -> "step";
    "step_zero" -> "roll>";
    "sum" -> "step_zero";
    "sum" -> "+";
    "swapd" -> "dip";
    "swapd" -> "swap";
    "swons" -> "cons";
    "swons" -> "swap";
    "swoncat" -> "concat";
    "swoncat" -> "swap";
    "tailrec" -> "genrec";
    "tailrec" -> "i";
    "take" -> "pop";
    "take" -> "times";
    "take" -> "shift";
    "take" -> "roll>";
    "ternary" -> "popd";
    "ternary" -> "binary";
    "third" -> "second";
    "third" -> "rest";
    "tuck" -> "swapd";
    "tuck" -> "dup";
    "unary" -> "popd";
    "unary" -> "nullary";
    "uncons" -> "cleave";
    "uncons" -> "rest";
    "uncons" -> "first";
    "unit" -> "cons";
    "unquoted" -> "dip";
    "unquoted" -> "i";
    "unswons" -> "swap";
    "unswons" -> "uncons";
    "while" -> "loop";
    "while" -> "concat";
    "while" -> "dupdipd";
    "while" -> "nulco";
    "while" -> "swap";
    "x" -> "i";
    "x" -> "dup";
    "step" -> "x";
    "step" -> "_step0";
    "_step0" -> "branch";
    "_step0" -> "_stept";
    "_step0" -> "popopop";
    "_step0" -> "_step1";
    "_step1" -> "roll<";
    "_step1" -> "dipd";
    "_step1" -> "?";
    "_stept" -> "x";
    "_stept" -> "dip";
    "_stept" -> "dupdipd";
    "_stept" -> "dipd";
    "_stept" -> "uncons";
    "times" -> "x";
    "times" -> "_times0";
    "_times0" -> "branch";
    "_times0" -> "_timest";
    "_times0" -> "popopop";
    "_times0" -> "_times1";
    "_times1" -> "roll<";
    "_times1" -> "dipd";
    "_times1" -> ">";
    "_times1" -> "dup";
    "_timest" -> "x";
    "_timest" -> "dupdipd";
    "_timest" -> "dip";
    "_timest" -> "--";
    "map" -> "tailrec";
    "map" -> "dip";
    "map" -> "_mape";
    "map" -> "_map?";
    "map" -> "cons";
    "map" -> "_map0";
    "_map?" -> "not";
    "_map?" -> "bool";
    "_map?" -> "pop";
    "_mape" -> "reverse";
    "_mape" -> "popd";
    "_map0" -> "_map2";
    "_map0" -> "dipd";
    "_map0" -> "_map1";
    "_map1" -> "shift";
    "_map1" -> "stackd";
    "_map2" -> "swons";
    "_map2" -> "roll<";
    "_map2" -> "dipd";
    "_map2" -> "cons";
    "_map2" -> "infrst";
}
